/* Auto-generated by genmsg_cpp for file /home/mastafa/robotws/src/uvc_camera/srv/MovePTZ.srv */
#ifndef UVC_CAMERA_SERVICE_MOVEPTZ_H
#define UVC_CAMERA_SERVICE_MOVEPTZ_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace uvc_camera
{
template <class ContainerAllocator>
struct MovePTZRequest_ {
  typedef MovePTZRequest_<ContainerAllocator> Type;

  MovePTZRequest_()
  : pan(0)
  , tilt(0)
  , zoom(0)
  {
  }

  MovePTZRequest_(const ContainerAllocator& _alloc)
  : pan(0)
  , tilt(0)
  , zoom(0)
  {
  }

  typedef int16_t _pan_type;
  int16_t pan;

  typedef int16_t _tilt_type;
  int16_t tilt;

  typedef int16_t _zoom_type;
  int16_t zoom;


  typedef boost::shared_ptr< ::uvc_camera::MovePTZRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uvc_camera::MovePTZRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct MovePTZRequest
typedef  ::uvc_camera::MovePTZRequest_<std::allocator<void> > MovePTZRequest;

typedef boost::shared_ptr< ::uvc_camera::MovePTZRequest> MovePTZRequestPtr;
typedef boost::shared_ptr< ::uvc_camera::MovePTZRequest const> MovePTZRequestConstPtr;



template <class ContainerAllocator>
struct MovePTZResponse_ {
  typedef MovePTZResponse_<ContainerAllocator> Type;

  MovePTZResponse_()
  : rpan(0)
  , rtilt(0)
  , rzoom(0)
  {
  }

  MovePTZResponse_(const ContainerAllocator& _alloc)
  : rpan(0)
  , rtilt(0)
  , rzoom(0)
  {
  }

  typedef int16_t _rpan_type;
  int16_t rpan;

  typedef int16_t _rtilt_type;
  int16_t rtilt;

  typedef int16_t _rzoom_type;
  int16_t rzoom;


  typedef boost::shared_ptr< ::uvc_camera::MovePTZResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uvc_camera::MovePTZResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct MovePTZResponse
typedef  ::uvc_camera::MovePTZResponse_<std::allocator<void> > MovePTZResponse;

typedef boost::shared_ptr< ::uvc_camera::MovePTZResponse> MovePTZResponsePtr;
typedef boost::shared_ptr< ::uvc_camera::MovePTZResponse const> MovePTZResponseConstPtr;


struct MovePTZ
{

typedef MovePTZRequest Request;
typedef MovePTZResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct MovePTZ
} // namespace uvc_camera

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::uvc_camera::MovePTZRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::uvc_camera::MovePTZRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::uvc_camera::MovePTZRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "634cfef94ff2ed7578db5f7d396288a4";
  }

  static const char* value(const  ::uvc_camera::MovePTZRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x634cfef94ff2ed75ULL;
  static const uint64_t static_value2 = 0x78db5f7d396288a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::uvc_camera::MovePTZRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uvc_camera/MovePTZRequest";
  }

  static const char* value(const  ::uvc_camera::MovePTZRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::uvc_camera::MovePTZRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
int16 pan\n\
int16 tilt\n\
int16 zoom\n\
\n\
";
  }

  static const char* value(const  ::uvc_camera::MovePTZRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::uvc_camera::MovePTZRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::uvc_camera::MovePTZResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::uvc_camera::MovePTZResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::uvc_camera::MovePTZResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f5f93c0a2eb854a9067e042b93231a6f";
  }

  static const char* value(const  ::uvc_camera::MovePTZResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf5f93c0a2eb854a9ULL;
  static const uint64_t static_value2 = 0x067e042b93231a6fULL;
};

template<class ContainerAllocator>
struct DataType< ::uvc_camera::MovePTZResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uvc_camera/MovePTZResponse";
  }

  static const char* value(const  ::uvc_camera::MovePTZResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::uvc_camera::MovePTZResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16 rpan\n\
int16 rtilt\n\
int16 rzoom\n\
\n\
";
  }

  static const char* value(const  ::uvc_camera::MovePTZResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::uvc_camera::MovePTZResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::uvc_camera::MovePTZRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pan);
    stream.next(m.tilt);
    stream.next(m.zoom);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct MovePTZRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::uvc_camera::MovePTZResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.rpan);
    stream.next(m.rtilt);
    stream.next(m.rzoom);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct MovePTZResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<uvc_camera::MovePTZ> {
  static const char* value() 
  {
    return "a964e82c0e0401a25741502592b56334";
  }

  static const char* value(const uvc_camera::MovePTZ&) { return value(); } 
};

template<>
struct DataType<uvc_camera::MovePTZ> {
  static const char* value() 
  {
    return "uvc_camera/MovePTZ";
  }

  static const char* value(const uvc_camera::MovePTZ&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<uvc_camera::MovePTZRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a964e82c0e0401a25741502592b56334";
  }

  static const char* value(const uvc_camera::MovePTZRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<uvc_camera::MovePTZRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uvc_camera/MovePTZ";
  }

  static const char* value(const uvc_camera::MovePTZRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<uvc_camera::MovePTZResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a964e82c0e0401a25741502592b56334";
  }

  static const char* value(const uvc_camera::MovePTZResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<uvc_camera::MovePTZResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uvc_camera/MovePTZ";
  }

  static const char* value(const uvc_camera::MovePTZResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // UVC_CAMERA_SERVICE_MOVEPTZ_H

